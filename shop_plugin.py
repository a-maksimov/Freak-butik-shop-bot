import json
import os

import config
from start import handle_start_help
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telegram_bot_calendar import WYearTelegramCalendar
from datetime import date

import text
from correct_number import correct_number
from SQLighter import SQLighter

LSTEP = {'y': '–≥–æ–¥', 'm': '–º–µ—Å—è—Ü', 'd': '–¥–µ–Ω—å'}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ë–î, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
SQLighter(config.database_name).create_clients()
SQLighter(config.database_name).create_shop()
SQLighter(config.database_name).create_piercing()
SQLighter(config.database_name).close()


# –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î
# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
def add_client(client):
    db_worker = SQLighter(config.database_name)
    db_worker.add_client(client)
    db_worker.close()


# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø. –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
def update_client(user_id, first_name, last_name, phone):
    db_worker = SQLighter(config.database_name)
    db_worker.update_client(user_id, first_name, last_name, phone)
    db_worker.close()


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –ë–î
def get_product(product_id):
    db_worker = SQLighter(config.database_name)
    product = db_worker.get_product(product_id)
    db_worker.close()
    return product


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞
def get_access(user_id):
    db_worker = SQLighter(config.database_name)
    access = db_worker.get_access(user_id)
    db_worker.close()
    return access


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞
def view_client(user_id):
    db_worker = SQLighter(config.database_name)
    profile = db_worker.view_client(user_id)
    db_worker.close()
    return profile


# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã –∑–∞–ø–∏—Å–∏
# TODO: user_id is not unique for client if someone gets booked by another user_id
# TODO: and phone can't be passed to booking; try using increment id for booking
def add_booking(call, user_id, result):
    date_booked = (result.year, result.month, result.day)
    cal_id = int(call.data.split('_')[1])
    if cal_id == 1:
        table = 'calendar_piercing'
    db_worker = SQLighter(config.database_name)
    db_worker.add_booking(user_id, table, date_booked)
    db_worker.close()


# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–∑–º–µ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
# –õ—ç–Ω–¥–∏–Ω–≥ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω
def markup_shop():
    markup = InlineKeyboardMarkup()
    item1 = InlineKeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å ü•∑', callback_data='profile')
    item2 = InlineKeyboardButton('–ö–æ–ª–ª–µ–∫—Ü–∏–∏', callback_data='collections')
    markup.row(item1, item2)
    item3 = InlineKeyboardButton('–ñ–µ–Ω—Å–∫–æ–µ', callback_data='women')
    item4 = InlineKeyboardButton('–ú—É–∂—Å–∫–æ–µ', callback_data='men')
    markup.row(item3, item4)
    item4 = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='start')
    item5 = InlineKeyboardButton('–°–∫—Ä—ã—Ç—å', callback_data='hide')
    markup.row(item4, item5)
    return markup


def markup_back_to_landing():
    markup = InlineKeyboardMarkup()
    item1 = InlineKeyboardButton('–ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω', callback_data='start')
    item2 = InlineKeyboardButton('–°–∫—Ä—ã—Ç—å', callback_data='hide')
    markup.row(item1, item2)
    return markup


# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
def markup_product(count, page, url):
    markup = InlineKeyboardMarkup()
    item1 = InlineKeyboardButton(text='‚¨Ö', callback_data="{\"method\":\"pagination\","
                                                         "\"NumberPage\":" + str(page - 1) + ","
                                                                                             "\"CountPage\":" + str(
        count) + "}")
    item2 = InlineKeyboardButton(text=f'{page}/{count}', callback_data=' ')
    item3 = InlineKeyboardButton(text='‚û°', callback_data="{\"method\":\"pagination\","
                                                         "\"NumberPage\":" + str(page + 1) + ","
                                                                                             "\"CountPage\":" + str(
        count) + "}")
    if page == 1:
        markup.row(item2, item3)
    elif page == count:
        markup.row(item1, item2)
    else:
        markup.row(item1, item2, item3)
    item4 = InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–µ', url=url)
    item5 = InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å —Å QIWI', callback_data='buy')
    markup.row(item4, item5)
    item6 = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='shop')
    item7 = InlineKeyboardButton(text='–°–∫—Ä—ã—Ç—å', callback_data='hide')
    markup.row(item6, item7)
    return markup


# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è
def markup_profile():
    markup = InlineKeyboardMarkup()
    item1 = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='shop')
    item2 = InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', callback_data='bought')
    markup.row(item1, item2)
    item3 = InlineKeyboardButton('–°–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω', callback_data='change_phone')
    markup.row(item3)
    return markup


# –õ—ç–Ω–¥–∏–Ω–≥ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω
def markup_collections():
    markup = InlineKeyboardMarkup()
    item1 = InlineKeyboardButton('RE: BORN', callback_data='re_born')
    item2 = InlineKeyboardButton('CHAOS', callback_data='chaos')
    markup.row(item1, item2)
    item3 = InlineKeyboardButton('Vision of the Future', callback_data='vision_of_the_future')
    markup.row(item3)
    item4 = InlineKeyboardButton('MARS_4', callback_data='mars_4')
    item5 = InlineKeyboardButton('EXHALE', callback_data='exhale')
    markup.row(item4, item5)
    item6 = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='shop')
    markup.row(item6)
    return markup


# –ó–∞–ø–∏—Å—å –Ω–∞ –ø–∏—Ä—Å–∏–Ω–≥
def markup_piercing():
    markup = InlineKeyboardMarkup()
    item1 = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='shop')
    item2 = InlineKeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è üìÖ', callback_data='calendar_piercing')
    markup.row(item1, item2)
    item3 = InlineKeyboardButton('–°–∫—Ä—ã—Ç—å', callback_data='hide')
    markup.row(item3)
    return markup


# –®–∞–≥–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥—É
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
def step_set_first_name(message, bot, call, cal_id):
    first_name = message.text
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–º—è –±—É–∫–≤–æ–π –∏–ª–∏ —Å–ª–æ–≤–æ–º
    if not first_name.isalpha():
        msg = bot.send_message(message.chat.id, '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤', reply_to_message_id=message.message_id)
        bot.register_next_step_handler(msg, step_set_first_name, bot, call, cal_id)  # –µ—Å–ª–∏ –Ω–µ –±—É–∫–≤–∞, –∏ –Ω–µ —Å–ª–æ–≤–æ, —Ç–æ
        # –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
    else:
        first_name = first_name.capitalize()  # –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º—è
        msg = bot.send_message(call.message.chat.id, '–í–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é')
        bot.register_next_step_handler(msg, step_set_last_name, bot, call, cal_id, first_name)  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ñ—É–Ω–∫—Ü–∏—é
        # —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∞–º–∏–ª–∏–∏


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∞–º–∏–ª–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
def step_set_last_name(message, bot, call, cal_id, first_name):
    last_name = message.text
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–º–∏–ª–∏—è –±—É–∫–≤–æ–π –∏–ª–∏ —Å–ª–æ–≤–æ–º
    if not last_name.isalpha():
        msg = bot.send_message(message.chat.id, '–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤',
                               reply_to_message_id=message.message_id)
        bot.register_next_step_handler(msg, step_set_last_name, bot, call, cal_id, first_name)  # –µ—Å–ª–∏ –Ω–µ –±—É–∫–≤–∞, –∏ –Ω–µ
        # —Å–ª–æ–≤–æ, —Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
    else:
        last_name = last_name.capitalize()  # –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–º–∏–ª–∏—é
        msg = bot.send_message(call.message.chat.id, '–í–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "7-123-456-7890" üì≤')
        bot.register_next_step_handler(msg, step_set_phone, bot, call, cal_id, first_name, last_name)  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤
        # —Ñ—É–Ω–∫—Ü–∏—é —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
def step_set_phone(message, bot, call, cal_id, first_name, last_name):
    global LSTEP
    phone = message.text
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–æ–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º
    if not correct_number(phone):
        msg = bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "7-123-456-7890"',
                               reply_to_message_id=message.message_id)
        bot.register_next_step_handler(msg, step_set_phone, bot, call, cal_id, first_name, last_name)  # –µ—Å–ª–∏
        # –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, —Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
    else:
        update_client(call.from_user.id, first_name, last_name, phone)  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É –∏–º—è, —Ñ–∞–º–∏–ª–∏—é, —Ç–µ–ª–µ—Ñ–æ–Ω
        calendar, step = WYearTelegramCalendar(calendar_id=cal_id, locale='ru',
                                               min_date=date.today()).build()  # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        if cal_id == 1:
            string = '–ø–∏—Ä—Å–∏–Ω–≥'
        bot.send_message(call.message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]} –∑–∞–ø–∏—Å–∏ –Ω–∞ {string}', reply_markup=calendar)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏
def callback_calendar(bot, call):
    global LSTEP
    cal_id = int(call.data.split('_')[1])
    if cal_id == 1:
        string = '–ø–∏—Ä—Å–∏–Ω–≥'
    result, key, step = WYearTelegramCalendar(calendar_id=cal_id, locale='ru', min_date=date.today()).process(call.data)
    if not result and key:
        bot.edit_message_text(f'–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]} –∑–∞–ø–∏—Å–∏ –Ω–∞ {string}',
                              call.message.chat.id, call.message.message_id, reply_markup=key)
    elif result:
        add_booking(call, call.from_user.id, result)
        bot.answer_callback_query(call.id, text='–î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞')
        markup = markup_back_to_landing()
        bot.edit_message_text(f'–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã!\n'
                              f'–ñ–¥–µ–º –≤–∞—Å {result} –Ω–∞ {string}', call.message.chat.id, call.message.message_id,
                              reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
def callback_query(bot, call):
    req = call.data
    if req == 'hide':
        bot.delete_message(call.message.chat.id, call.message.message_id)

    elif req == 'start':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        handle_start_help(bot, call.message)

    elif req == 'shop':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        markup = markup_shop()
        img_url = 'https://www.freak-butik.ru/photo_content/20.jpg'
        title = '–ó–∞–≥–ª—è–Ω–∏ –≤ —Å–≤–æ–µ–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ –ø–æ–∫—É–ø–∫–∞–º'
        bot.send_photo(call.message.chat.id, img_url, caption=title, reply_markup=markup)

    elif req == 'profile':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        try:
            access = get_access(call.message.chat.id)
            if access == 0:
                access_name = '–ö–ª–∏–µ–Ω—Ç'
            elif access == 1:
                access_name = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
            elif access == 777:
                access_name = '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'
            profile = view_client(call.message.chat.id)
            markup = markup_profile()
            bot.send_message(call.message.chat.id,
                             f'*üìá | –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:*\n\n*üë§ | –í–∞—à ID:* {profile[0]}\n'
                             f'*üí∏ | –ë–∞–ª–∞–Ω—Å:* {profile[3]} ‚ÇΩ\n'
                             f'*üëë | –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:* {access_name}\n'
                             f'*üõí | –ö—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:* {profile[5]}\n\n'
                             f'*‚òé | –¢–µ–ª–µ—Ñ–æ–Ω:* {profile[8]}\n\n'
                             # f'*üóÇ –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞–ø–∏—à–∏—Ç–µ /mybuy*'
                             , parse_mode='Markdown', reply_markup=markup)
        except:
            bot.send_message(call.message.chat.id, f'üö´ | –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã')

    elif req == 'collections':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        markup = markup_collections()
        img_url = 'https://avatars.mds.yandex.net/get-altay/1881820/2a0000016b1e99d5bf098ec3ede3f4d8b5b9/XXXL'
        title = text.collections
        bot.send_photo(call.message.chat.id, img_url, caption=title, parse_mode='Markdown', reply_markup=markup)

    elif (req == 'women') or ('pagination' in req):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        product_id = 1  # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞
        product = get_product(product_id)
        product_id = product[0]
        product_name = product[1]
        product_price = product[2]
        product_url = product[3]
        if req == 'women':
            count = 10  # TODO: —Å–¥–µ–ª–∞—Ç—å –∑–∞–≤–∏—Å–∏–º—ã–º –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –≤ –ø–∞–ø–∫–µ
            page = 1

        elif 'pagination' in req:
            json_string = json.loads(req)
            count = json_string['CountPage']
            page = json_string['NumberPage']

        markup = markup_product(count, page, product_url)
        filepath = os.path.join(os.getcwd(), 'products', str(product_id))
        if not os.path.exists(filepath):
            print("product folder doesn't exist")
        else:
            print("product folder exists")
        img = os.path.join(filepath, 'id_' + str(product_id) + '_' + str(page - 1) + '.jpg')
        title = text.products[0]
        bot.send_photo(call.message.chat.id, photo=open(img, 'rb'),
                       caption=title.format(product_name, product_price, page, count),
                       parse_mode='Markdown', reply_markup=markup)

    elif req == 'book_piercing':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        markup = markup_piercing()
        img_url = 'https://m.freak-butik.ru/img/Small-ALEXA.png'
        title = '–ó–∞–ø–∏—à–∏—Å—å –Ω–∞ –ø–∏—Ä—Å–∏–Ω–≥'
        bot.send_photo(call.message.chat.id, img_url, caption=title, reply_markup=markup)

    elif req == 'calendar_piercing':  # or –°—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–ª–±—ç–∫–∏ —Å –∫–Ω–æ–ø–æ–∫ –¥—Ä—É–≥–∏—Ö —É—Å–ª—É–≥:
        if req == 'calendar_piercing':
            cal_id = 1
        # –°—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥—Ä—É–≥–∏—Ö —É—Å–ª—É–≥
        msg = bot.send_message(call.message.chat.id, '–í–µ–¥–∏—Ç–µ –∏–º—è')
        bot.register_next_step_handler(msg, step_set_first_name, bot, call, cal_id)  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏
